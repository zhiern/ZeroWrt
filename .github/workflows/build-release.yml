name: Build releases

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Select the build version'
        required: true
        default: 'release'
        type: choice
        options:
          - 'release'
          - 'snapshot-24.10'
      ccache:
        description: 'Enable ccache (Use Cache to speed up next build)'
        type: boolean
        default: false
      lan_addr:
        description: 'Setting default LAN address'
        required: true
        default: '10.0.0.1'
        type: string
      root_password:
        description: 'Setting default root password (Optional, No password by default)'
        required: false
        default: 'password'
        type: string
      build_options:
        description: 'Build options (separate multiple options with spaces)'
        required: false
        default: 'BUILD_FAST=y ENABLE_BPF=y ENABLE_LTO=y ENABLE_OTA=y'
        type: string
          
jobs:
  build:
    name: Build ${{ matrix.model }}
    runs-on: ubuntu-24.04
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        model:
          - rockchip
          - x86_64

    steps:
    - name: Checkout
      continue-on-error: true
      uses: actions/checkout@main
      with:
        path: ZeroWrt

    - name: Setup variables
      run: |
        sudo timedatectl set-timezone 'Asia/Shanghai'
        git config --global user.name 'actions'
        git config --global user.email 'action@github.com'
        echo build_dir="/builder" >> "$GITHUB_ENV"
        [ "${{ github.event.inputs.version }}" = release ] && echo build_version="v24" >> "$GITHUB_ENV" || echo build_version="dev" >> "$GITHUB_ENV"

    - name: Show system
      run: |
        echo -e "\n\e[1;32mCPU:\e[0m"
        echo "$(grep 'model name' /proc/cpuinfo | head -1 | awk -F ': ' '{print $2}') ($(grep 'cpu MHz' /proc/cpuinfo | head -1 | awk -F ': ' '{print $2}')MHz) x $(grep processor /proc/cpuinfo  | wc -l)"
        echo -e "\n\e[1;32mMemory:\e[0m"
        free -h
        echo -e "\n\e[1;32mStorage:\e[0m"
        df -Th / /mnt
        echo -e "\n\e[1;32mSystem:\e[0m"
        lsb_release -a
        echo -e "\n\e[1;32mKernel:\e[0m"
        uname -a
        echo

    - name: Install Caddy Server
      run: |
        sudo curl -sL -o /usr/bin/caddy https://github.com/zhiern/ZeroWrt/releases/download/Caddy/caddy
        sudo chmod 755 /usr/bin/caddy
        echo ":8080 {" > caddyfile
        echo "    root * $(pwd)/ZeroWrt" >> caddyfile
        echo "    file_server browse" >> caddyfile
        echo "}" >> caddyfile
        sudo /usr/bin/caddy start --config caddyfile --adapter caddyfile

    - name: Free disk space
      uses: sbwml/actions@free-disk
      with:
        build-mount-path: /builder

    - name: Build System Setup
      uses: sbwml/actions@openwrt-build-setup

    - name: Install LLVM
      uses: sbwml/actions@install-llvm

    - name: Compile OpenWrt
      working-directory: /builder
      id: compile
      continue-on-error: true
      env:
        git_name: ${{ secrets.username }}
        git_password: ${{ secrets.password }}
      run: |
        export ${{ github.event.inputs.build_options }} LAN=${{ github.event.inputs.lan_addr }} USE_GCC15=y
        [ ${{ github.event.inputs.ccache }} = 'true' ] && export ENABLE_CCACHE=y
        [ -n ${{ github.event.inputs.root_password }} ] && export ROOT_PASSWORD="${{ github.event.inputs.root_password }}"
        bash <(curl -sS http://127.0.0.1:8080/build.sh) ${{ env.build_version }} ${{ matrix.model }}
        cd openwrt
        if [ "${{ github.event.inputs.version }}" = release ]; then
          tags=OpenWrt-$(git describe --abbrev=0 --tags)
        else
          tags=snapshot-24.10-$(git log -n 1 --date=format:"%Y%m%d" --format="%cd")-$(git log --pretty=format:"%h" -1)
        fi
        echo "latest_release=$tags" >>$GITHUB_ENV

    - name: Extensive logs after a failed compilation
      working-directory: /builder
      if: steps.compile.outcome == 'failure'
      run: |
        cd openwrt
        make V=s

    - name: Prepare Kernel Files
      working-directory: /builder
      run: |
        base_name=$(basename ${{ env.build_dir }}/openwrt/*-*.tar.gz)
        kmod_name=$(echo $base_name | sed 's/~/-/g')
        mv ${{ env.build_dir }}/openwrt/*-*.tar.gz ${{ env.build_dir }}/openwrt/$kmod_name

    - name: Release kernel modules
      uses: ncipollo/release-action@v1.14.0
      with:
        name: kmod-snapshot
        allowUpdates: true
        prerelease: true
        tag: snapshot
        commit: openwrt-24.10
        replacesArtifacts: true
        token: ${{ secrets.GITHUB_TOKEN  }}
        artifacts: |
          ${{ env.build_dir }}/openwrt/*-*.tar.gz
        
    - name: Prepare Firmware Files
      working-directory: /builder
      run: |
        mkdir -p rom
        if [ "${{ matrix.model }}" = "rockchip" ]; then
          cp -a openwrt/bin/targets/rockchip/*/*.img.gz rom/
          cp -a openwrt/ota/rockchip.json rom/
        elif [ "${{ matrix.model }}" = "x86_64" ]; then
          cp -a openwrt/bin/targets/x86/*/*-squashfs-combined-efi.img.gz rom/
          cp -a openwrt/bin/targets/x86/*/*-generic-rootfs.tar.gz rom/
          cp -a openwrt/ota/x86_64.json rom/
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.model }}-openwrt-${{ env.latest_release }}
        path: ${{ env.build_dir }}/rom/*

    - name: Create release
      continue-on-error: true
      uses: ncipollo/release-action@v1
      with:
        name: ${{ env.latest_release }}
        allowUpdates: true
        tag: ${{ env.latest_release }}
        commit: openwrt-24.10
        replacesArtifacts: true
        token: ${{ secrets.GITHUB_TOKEN }}
        artifacts: ${{ env.build_dir }}/rom/*
          
    - name: Delete workflow runs
      uses: GitRML/delete-workflow-runs@main
      continue-on-error: true
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        retain_days: 0
        keep_minimum_runs: 0

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@v0.3.4
      with:
          keep_latest: 3
          keep_min_download_counts: 1 # Optional parameters
          delete_tags: true
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN  }}
